name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    name: OS ${{ matrix.os }} | Compiler ${{ matrix.compiler-name }} | Extra Flag ${{ matrix.extra_flags }}
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-11, macos-12, ubuntu-20.04, ubuntu-22.04 ]
        compiler-name: [ 'open-mpi', 'mpich' ]
        include:
          - compiler-name: 'open-mpi'
            extra_flags: '--oversubscribe'
    env:
      EXTRA_FLAG: ${{ matrix.extra_flags }}

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Install MPICH on MacOS
        if: ${{ startsWith(matrix.os, 'macos') && matrix.compiler-name == 'mpich' }}
        run: brew install mpich

      - name: Install OPEN-MPI on MacOS
        if: ${{ startsWith(matrix.os, 'macos') && matrix.compiler-name == 'open-mpi' }}
        run: brew install open-mpi

      - name: Install MPICH on Ubuntu
        if: ${{ startsWith(matrix.os, 'ubuntu') && matrix.compiler-name == 'mpich' }}
        run: sudo apt-get install -y libmpich-dev mpich

      - name: Install OPEN-MPI on Ubuntu
        if: ${{ startsWith(matrix.os, 'ubuntu') && matrix.compiler-name == 'open-mpi' }}
        run: sudo apt-get install -y libopenmpi-dev openmpi-bin

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} ${{ matrix.extra-cmake-arguments }}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}} -V

  sonar:
    name: SonarCloud
    runs-on: ubuntu-latest
    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    steps:
      - uses: actions/checkout@v4
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0
      - name:  Install sonar-scanner and build-wrapper
        uses: sonarsource/sonarcloud-github-c-cpp@v3
      - name: Install MPI compiler
        run: sudo apt-get install -y mpich
      - name: Run build-wrapper
        run: |
          mkdir build
          cmake -S . -B build
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build build/ --config Release
      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: sonar-scanner --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}" #Consult https://docs.sonarcloud.io/advanced-setup/ci-based-analysis/sonarscanner-cli/ for more information and options